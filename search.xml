<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>SqlServer基础</title>
      <link href="/posts/36360/"/>
      <url>/posts/36360/</url>
      
        <content type="html"><![CDATA[<h1 id="第一章-数据库基础"><a href="#第一章-数据库基础" class="headerlink" title="第一章    数据库基础"></a>第一章    数据库基础</h1><h2 id="1-数据库-DB"><a href="#1-数据库-DB" class="headerlink" title="1.数据库(DB)"></a>1.数据库(DB)</h2><p><strong>数据库的定义</strong></p><ul><li>数据库（DataBase,DB）是长期储存在计算机内，有组织的，可共享的大量数据的集合</li></ul><p><strong>数据库的基本特征</strong></p><ol><li>数据按一定的数据模型组织，描述和储存</li><li>可为各种用户共享数据</li><li>冗余度较小</li><li>数据独立性较高</li><li>易扩展</li></ol><p><strong>数据库总览</strong></p><ul><li>关系型数据库（SQL）<ul><li>MySQL , Oracle , SQL Server , SQLite , DB2 , …</li><li>关系型数据库通过<strong>外键</strong>关联来建立表与表之间的关系</li></ul></li><li>非关系型数据库（NOSQL）<ul><li>Redis , MongoDB , …</li><li>非关系型数据库通常指数据以<strong>对象</strong>的形式存储在数据库中，而对象之间的关系通过每个对象自 身的属性来决定</li></ul></li></ul><h2 id="2-数据库管理系统（DBMS"><a href="#2-数据库管理系统（DBMS" class="headerlink" title="2.数据库管理系统（DBMS)"></a>2.数据库管理系统（DBMS)</h2><blockquote><p><strong>数据库管理系统是一个用于支持用户创建和维护数据库的应用程序集合</strong>,<strong>是一个计算机基础软件，一个大型复杂的软件系统</strong></p></blockquote><p><strong>DBMS的用途</strong></p><p>科学地组织和存储数据、高效地获取和维护数据</p><p><img src="https://cdn.jsdelivr.net/gh/nortise/myblog/img/202203261252731.png"></p><h3 id="DBMS主要功能"><a href="#DBMS主要功能" class="headerlink" title="DBMS主要功能"></a><strong>DBMS主要功能</strong></h3><ol><li><p><strong>数据定义功能</strong></p><ol><li>提供数据定义语言(Data Defination Language，DDL)</li><li>定义数据库中的数据对象</li></ol></li><li><p><strong>数据组织、存储和管理功能</strong></p><ol><li>分类组织、存储和管理各种数据，如用户数据、数据字典、索引等</li><li>确定组织数据的文件结构和存取方式</li><li>实现数据之间的联系</li><li>提供多种存取方法提高存取效率</li></ol></li><li><p><strong>数据操纵功能</strong></p><ol><li>提供数据操纵语言(Data Manipulation Language，DML)</li><li>实现对数据库的基本操作 (查询、插入、删除和修改)</li></ol></li><li><p><strong>数据库的事务管理和运行管理</strong></p><ol><li>数据库在建立、运行和维护时由DBMS统一管理和控制</li><li>保证数据的安全性、完整性、多用户对数据的并发使用以及发生故障后的系统恢复</li></ol></li><li><p><strong>数据库的建立和维护功能</strong></p><ol><li>数据库初始数据装载、转换</li><li>数据库转储，介质故障恢复</li><li>数据库的重组织</li><li>性能监视分析等</li></ol></li><li><p><strong>其他功能</strong></p><ol><li>DBMS与网络中其它软件系统的通信</li><li>两个DBMS系统的数据转换</li><li>异构数据库之间的互访和互操作</li></ol><h3 id="DBMS的工作模式示意图"><a href="#DBMS的工作模式示意图" class="headerlink" title="DBMS的工作模式示意图"></a>DBMS的工作模式示意图</h3><p>  1）接收应用程序的数据请求和处理请求。</p><p>  2）将用户的查询数据请求（高级指令）转换成复杂的低层指令。</p><p>  3）低层指令实现对数据库的具体操作。</p><p>  4）接收数据库操作得到的查询结果。</p><p>  5）对查询结果进行处理，包括相应的格式转换。</p><p>  6）将处理结果返回给用户。</p><p><img src="https://cdn.jsdelivr.net/gh/nortise/myblog/img/202203261256246.png" alt="image-20220326103911455"></p><h3 id="数据库管理系统的模块组成"><a href="#数据库管理系统的模块组成" class="headerlink" title="数据库管理系统的模块组成"></a>数据库管理系统的模块组成</h3></li></ol><ul><li>语言编译处理程序</li><li>系统运行控制程序</li><li>系统建立与维护程序</li><li>数据字典</li></ul><h2 id="3-数据库系统（DBS）"><a href="#3-数据库系统（DBS）" class="headerlink" title="3.数据库系统（DBS）"></a>3.数据库系统（DBS）</h2><p>定义：在计算机系统中引入数据库的系统称为数据库系统</p><p>构成：数据库、数据库管理系统、应用程序、数据库管理员、用户</p><p><img src="https://cdn.jsdelivr.net/gh/nortise/myblog/img/202203261256524.png" alt="image-20220326091056871"></p><p><strong>数据处理</strong></p><p>对各种类型的数据进行收集、分类、储存、检索、加工和计算、传播等一系列活动的综合</p><p><strong>数据管理</strong></p><ul><li>对数据进行分类、组织、编码、存储、检索和维护</li><li>数据处理的核心问题</li></ul><p><strong>数据库系统的结构类型</strong></p><p>数据库系统的类型可以从不同的角度进行划分。根据<strong>用户数的多少</strong>来分类，可分为单用户和多用户；根据<strong>用途和使用范围</strong>分类为数据仓库或决策支持等类型；按数据库系统的部署位置不同可分为<strong>集中式</strong>、<strong>客户机／服务器式</strong>、<strong>分布式</strong>和<strong>并行式</strong>4种。</p><ol><li><strong>集中式数据库系统</strong></li></ol><p>数据库中的<strong>数据和数据处理集中在一台计算机上完成</strong>，其它用户可使用终端设备访问数据库，但是终端不参数据库中数据的计算与管理。此外，终端本身并不能完成任何操作,所有数据操作必须由主机完成</p><p><img src="https://cdn.jsdelivr.net/gh/nortise/myblog/img/202203261304264.png" alt="image-20220326095918346"></p><ol start="2"><li><strong>客户机/服务器（Client/Server，C/S）数据库系统</strong></li></ol><p>客户端完成本地个性化的处理，并向服务器发送请求，同时显示服务器返回的数据结果；服务器端负责处理公共的部分任务</p><p><img src="https://cdn.jsdelivr.net/gh/nortise/myblog/img/202203261304265.png" alt="image-20220326100028190"></p><p><strong>C/S三层架构</strong></p><p>实际应用中，出于系统安全性、稳定性和健壮性考虑，通常将数<strong>据库、应用服务器和客户端</strong>三层分开部署，称为C/S三层架构。包括：表示层、应用层和数据层。</p><p><img src="https://cdn.jsdelivr.net/gh/nortise/myblog/img/202203261304266.png" alt="image-20220326100246501"></p><ol start="3"><li><strong>分布式数据库系统</strong></li></ol><p>特点：逻辑整体性，物理分布性</p><blockquote><p>分布式数据库一般应用在大型跨国或跨地区的企业或单位</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/nortise/myblog/img/202203261304267.png" alt="image-20220326100414520"></p><ol start="4"><li><strong>并行式数据库系统</strong></li></ol><p><strong>高性能</strong>：如通过将数据库在多个磁盘上分布存储,利用多个处理机对磁盘数据进行并行处理解决磁盘I/O瓶颈,提高效率</p><p><strong>高可用性</strong>：通过数据复制增强数据库的可用性,当一个磁盘损坏时,该数据在其他磁盘上的副本仍可供使用</p><p><strong>可扩充性</strong>：当数据库遇到性能和容量瓶颈时,可通过增加处理器和存储设备平滑扩展性能</p><h2 id="4-数据库系统的发展及趋势"><a href="#4-数据库系统的发展及趋势" class="headerlink" title="4.数据库系统的发展及趋势"></a>4.数据库系统的发展及趋势</h2><h3 id="人工数据管理阶段"><a href="#人工数据管理阶段" class="headerlink" title="人工数据管理阶段"></a>人工数据管理阶段</h3><p>1946年后计算机以电子管为主要元器件,主要依靠硬件系统,工作效率低,用于计算且输入输出很少数据。</p><p>主要特点：</p><ol><li>数据不保存</li><li>数据面向应用</li><li>数据无独立性</li><li>无专门数据管理软件</li></ol><p><img src="https://cdn.jsdelivr.net/gh/nortise/myblog/img/202203261304268.png" alt="image-20220326092354168"></p><h3 id="文件系统管理数据阶段"><a href="#文件系统管理数据阶段" class="headerlink" title="文件系统管理数据阶段"></a>文件系统管理数据阶段</h3><p>从20世纪50年代中期到60年代中期，计算机以晶体管取代了运算器和控制器中的电子管。出现了操作系统、汇编语言和一些高级语言。计算机不仅限于科学计算，还大量用于管理等，在操作系统中有专门的数据管理软件，称为文件系统。</p><p><strong>文件系统管理数据的特点</strong></p><ol><li>数据长久保存</li><li>数据共享能力差</li><li>数据不能独立</li><li>数据管理功能简单</li></ol><p><strong>文件系统的不足</strong></p><ol><li>数据不共享，冗余大</li><li>数据不一致，不独立</li><li>数据文件缺乏关联</li></ol><p><img src="https://cdn.jsdelivr.net/gh/nortise/myblog/img/202203261304269.png" alt="image-20220326092629602"></p><h3 id="数据库系统阶段"><a href="#数据库系统阶段" class="headerlink" title="数据库系统阶段"></a>数据库系统阶段</h3><p>从20世纪60年代末到80年代，CPU向超大规模集成电路发展,操作系统得到了发展，而且各种<strong>DBMS软件</strong>不断涌现，使得数据库管理技术不断发展和完善，成为计算机领域中最具影响力和发展潜力、应用范围最广、成果最显著技术之一，形成了“数据库时代”。</p><p><strong>主要特点：</strong></p><ol><li>数据整体结构化</li><li>数据高共享</li><li>数据独立性高</li><li>数据统一由DBMS管理和控制</li></ol><h3 id="高级数据库发展阶段"><a href="#高级数据库发展阶段" class="headerlink" title="高级数据库发展阶段"></a>高级数据库发展阶段</h3><p>从20世纪80年代以后，传统数据库技术日趋成熟，并在各个领域的应用也逐步深入，在网络技术和各行业的新需求的不断推动下，数据库技术的发展呈现出前所未有的新气象，<strong>分布数据库</strong>、<strong>数据仓库</strong>、<strong>数据集市</strong>和<strong>商业智能</strong>等新技术纷纷涌现。</p><h4 id="分布式数据技术"><a href="#分布式数据技术" class="headerlink" title="分布式数据技术"></a>分布式数据技术</h4><p><strong>主要特点：</strong></p><ol><li>物理分布性</li><li>逻辑整体性</li><li>站点自治性</li><li>站点协作性</li><li>数据分布透明性</li><li>存在适当的数据冗余</li><li>事务管理的分布性</li></ol><p>分布式数据库系统兼顾<strong>集中管理</strong>和<strong>分布处理</strong>两项任务</p><p><img src="https://cdn.jsdelivr.net/gh/nortise/myblog/img/202203261304270.png" alt="image-20220326093144146"></p><h4 id="面向对象数据库技术"><a href="#面向对象数据库技术" class="headerlink" title="面向对象数据库技术"></a>面向对象数据库技术</h4><p><strong>主要特点</strong></p><ol><li>对象数据模型能完整地描述现实世界中的数据结构，表达数据间的嵌套，递归等关系</li><li>具有面向对象技术的封装性（数据与操作定义一起）和继承性（继承数据结构和操作）特点，提高软件的可用性</li></ol><p><img src="https://cdn.jsdelivr.net/gh/nortise/myblog/img/202203261304271.png" alt="image-20220326093439339"></p><h2 id="5-数据模型"><a href="#5-数据模型" class="headerlink" title="5.数据模型"></a>5.数据模型</h2><p>模型：对现实世界中某一事物特征的<strong>模拟和抽象</strong></p><h4 id="数据模型的分类"><a href="#数据模型的分类" class="headerlink" title="数据模型的分类"></a>数据模型的分类</h4><ol><li><strong>概念模型</strong>：也称信息模型，它是按用户的观点来对数据和信息建模，用于数据库设计</li><li><strong>逻辑模型</strong>：按计算机系统的观点对数据建模，描述数据的整体逻辑结构，主要用于DBMS实现，包括关系模型、层次模型、网状模型、面向对象模型等</li><li>物理模型：是对数据最底层的抽象，描述数据在系统内部的表示方式和存取方法，在磁盘或磁带上的存储方式和存取方法</li></ol><h4 id="信息世界中的基本概念"><a href="#信息世界中的基本概念" class="headerlink" title="信息世界中的基本概念"></a>信息世界中的基本概念</h4><ol><li><strong>实体</strong>：实体是现实世界中独立存在的事物，如：人，汽车，动物…</li><li><strong>属性</strong>：实体所具有的某一特征，如：学号，姓名，性别…</li><li><strong>域</strong>：属性的取值范围，如：年龄的域是整数，生日的域是日期</li><li><strong>联系</strong>：实体间的相互关系，按照实体参与联系可分为三类：一对一，一对多，多对多</li></ol><p><strong>E-R图</strong></p><p><img src="https://cdn.jsdelivr.net/gh/nortise/myblog/img/202203261304272.png" alt="image-20220326094435155"></p><p><img src="https://cdn.jsdelivr.net/gh/nortise/myblog/img/202203261304273.png" alt="image-20220326094446373"></p><h2 id="6-数据库的模式结构"><a href="#6-数据库的模式结构" class="headerlink" title="6.数据库的模式结构"></a>6.数据库的模式结构</h2><h3 id="三级模式结构"><a href="#三级模式结构" class="headerlink" title="三级模式结构"></a>三级模式结构</h3><p>三级模式：模式，内模式，外模式</p><p><img src="https://cdn.jsdelivr.net/gh/nortise/myblog/img/202203261304274.png" alt="image-20220326101119851"></p><p><strong>内模式：一个</strong></p><blockquote><p>也称存储模式或物理模式</p><ul><li>数据物理结构和存储方式的描述</li><li>数据在数据内部的表示方式</li></ul></blockquote><p><strong>模式：一个</strong></p><blockquote><p>模式地位：数据库系统模式的中间层</p><ul><li>与数据库的物理存储细节和硬件无关</li><li>与具体的应用程序、开发工具等无关</li></ul></blockquote><p><strong>外模式：多个</strong></p><blockquote><p>也称子模式或用户模式</p><p>一个数据库可以有多个外模式，反映了不同的用户需求，看待数据的方式，对数据保密的要求</p><p><strong>一个应用程序只能拥有一个外模式</strong></p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/nortise/myblog/img/202203261300783.png" alt="image-20220326101137515"></p><h3 id="二级映像"><a href="#二级映像" class="headerlink" title="二级映像"></a>二级映像</h3><p><strong>外模式/模式映像保证了数据的逻辑独立性</strong></p><ul><li>当模式改变时，数据库管理员修改有关的外模式／模式映象，使外模式保持不变</li><li>应用程序是依据数据的外模式编写的，从而应用程序不必修改，保证了数据与程序的逻辑独立性，简称数据的<strong>逻辑独立性</strong></li></ul><p><strong>模式／内模式映象保证了数据的物理独立性</strong></p><ul><li>数据库中的模式/内模式映像是唯一的</li><li>当数据库的存储结构发生改变时，只需要修改模式映像即可</li></ul><h1 id="第二章-关系数据库基础"><a href="#第二章-关系数据库基础" class="headerlink" title="第二章    关系数据库基础"></a>第二章    关系数据库基础</h1>]]></content>
      
      
      <categories>
          
          <category> SqlServer </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SqlServer </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>计算机基础学习学习笔记</title>
      <link href="/posts/010709/"/>
      <url>/posts/010709/</url>
      
        <content type="html"><![CDATA[<h1 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h1><p><strong>语言</strong></p><p><strong>进制</strong></p><p><strong>进制如何运算</strong></p><p><strong>二进制</strong></p><p><strong>数据宽度</strong></p><p><strong>有符号数和无符号数</strong></p><p><strong>原码反码补码</strong></p><p><strong>位运算</strong></p><p><strong>位运算计算</strong></p><p><strong>汇编</strong></p><p><strong>寄存器</strong></p><p> <strong>内存</strong></p><p><strong>汇编指令</strong></p><p><strong>内存复制</strong></p><p><strong>堆栈的指令</strong></p><p><strong>汇编如何写函数</strong></p><p><strong>堆栈传参</strong></p><p><strong>堆栈平衡</strong></p><p><strong>外挂</strong></p><h1 id="语言"><a href="#语言" class="headerlink" title="语言"></a>语言</h1><p><strong>机器语言 -&gt; 汇编语言 -&gt; 高级语言</strong></p><h3 id="机器语言"><a href="#机器语言" class="headerlink" title="机器语言"></a><strong>机器语言</strong></h3><p>底层逻辑</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"># 最早的计算机状态： 0 和 1 （高电频，低电频）# 最早的程序员纸带穿孔加0100 0000减0100 0000乘0100 0000 0100 0000除0100 0100 0100 0000<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="汇编语言"><a href="#汇编语言" class="headerlink" title="汇编语言"></a><strong>汇编语言</strong></h3><p>机器语言太复杂，为了简化记忆，汇编语言！</p><p>+++</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">加INC0100 0000减DEC0100 0000乘MUL0100 0000 0100 0000除DIV0100 0000 0100 0000<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>汇编语言一般用于底层的编写，单片机。</p><p>编译器：OD</p><h3 id="高级语言"><a href="#高级语言" class="headerlink" title="高级语言"></a><strong>高级语言</strong></h3><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">加 + NIC减 - DEC乘 * MUL除 / DIV<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h1 id="进制"><a href="#进制" class="headerlink" title="进制"></a>进制</h1><p>+++</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">二进制 0 1八进制 0 1 2 3 4 5 6 7十进制 0 1 2 3 4 5 6 7 8 9十六进制 0 1 2 3 4 5 6 7 8 9 a b c d e f<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>进制就是一组符号，可以自己随便定义。适用于<strong>进制的加密解密</strong></p><h1 id="进制的运算"><a href="#进制的运算" class="headerlink" title="进制的运算"></a>进制的运算</h1><p>几进制，逢几进几</p><p><strong>减法的本质</strong>：加一个负数</p><p><strong>除法的本质</strong>：乘一个数的倒数</p><h1 id="二进制"><a href="#二进制" class="headerlink" title="二进制"></a>二进制</h1><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"># 二进制0 1111 0 1 10 11 100 101 110 111 1000 1001 1010 1011 1100 1101 1110 11110 1  2  3  4   5   6   7    8   9    a    b    c     d   e     f<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><strong>为什么学习二进制？</strong></p><p>寄存器，内存，位</p><h1 id="数据宽度理解"><a href="#数据宽度理解" class="headerlink" title="数据宽度理解"></a>数据宽度理解</h1><p>计算机：内存，给数据增加宽度</p><p>位       0 1</p><p>字节     0~0xFF</p><p>字         0~0xFF </p><p>双字     0~0xFFFFFFF</p><p>在计算机中，每一个数据都需要给它定义数据类型，和数据长度</p><h1 id="有符号数和无符号数"><a href="#有符号数和无符号数" class="headerlink" title="有符号数和无符号数"></a>有符号数和无符号数</h1><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"># 有符号数最高位符号： 0（正数） 1（负数）# 无符号数二进制：1001 1010十六进制：0x9A<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="原码-反码-补码"><a href="#原码-反码-补码" class="headerlink" title="原码 反码 补码"></a>原码 反码 补码</h1><p><strong>有符号数的编码规则</strong></p><p>原码：最高位是符号位，对其他的位取绝对值</p><p>反码：</p><ul><li>正数：反码和原码相同</li><li>负数：最高位是1，其余位对原码取反</li></ul><p>补码：</p><ul><li>正数：补码和原码相同</li><li>负数：最高位是1，反码+1</li></ul><h1 id="位运算的理解"><a href="#位运算的理解" class="headerlink" title="位运算的理解"></a>位运算的理解</h1><p><strong>与运算（and &amp;）</strong></p><p>两个为1，都为1</p><p> <strong>或运算（or |）</strong></p><p>只要有一个为1，结果就为1</p><p><strong>异或运算（xor ^）</strong></p><p>不一样就是1</p><p><strong>非运算（not ~ 单目运算符）</strong></p><blockquote><p>1100   0011</p></blockquote><p><strong>位运算（移动位）</strong></p><p><strong>左移（shl &lt;&lt;）</strong></p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">0000 0001  @ 所有二进制全部向左移动若干位，低位补0，高位舍弃0000 0010<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><strong>右移（shr &gt;&gt;）</strong></p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">0000 0001  @ 所有二进制全部向右移动若干位，低位舍弃，高位补0，1（根据符号而定）0000 0000<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h1 id="位运算的加减乘除"><a href="#位运算的加减乘除" class="headerlink" title="位运算的加减乘除"></a>位运算的加减乘除</h1><p>计算机只认识0和1</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">4+5？0000 01000000 0101------------(加法，计算机不会直接加)0000 1001# 计算机的实现原理# 第一步：异或，如果不考虑进位，结果就是答案0000 01000000 0101------------0000 0001# 第二步：与运算（判断进位，如果与运算结果为0，则不考虑进位）0000 01000000 0101------------0000 0100# 第三步：将与运算的结果往左移一位 0000 1000 # 进位的结果# 第四步：异或，两次的结果0000 00010000 1000------------0000 1001# 第五步：与运算（判断进位，如果与运算结果为0，则不考虑进位）0000 00010000 1000------------0000 0000# 计算结果为0，所以最终结果为第四步异或运算的结果 0000 1001<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">4-5？4+（-5） 负数用补码来存0000 01001111 1011      ------------1111 1111   十六进制：ff0000 01001111 1011      ------------ 异或，如果不考虑进位，这个就是结果1111 11110000 01001111 1011      ------------ 与运算，运算结果为0，不考虑进位0000 0000最终结果 0000 0000<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="汇编语言-1"><a href="#汇编语言-1" class="headerlink" title="汇编语言"></a>汇编语言</h1><h2 id="通用寄存器"><a href="#通用寄存器" class="headerlink" title="通用寄存器"></a>通用寄存器</h2><hr>]]></content>
      
      
      <categories>
          
          <category> 计算机底层 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 计算机底层 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaScript学习笔记</title>
      <link href="/posts/010708/"/>
      <url>/posts/010708/</url>
      
        <content type="html"><![CDATA[<hr><h1 id="JavaScript"><a href="#JavaScript" class="headerlink" title="JavaScript"></a>JavaScript</h1><p>一种弱类型的脚本语言，由浏览器执行</p><h1 id="快速入门"><a href="#快速入门" class="headerlink" title="快速入门"></a>快速入门</h1><h2 id="1-1-引入-JavaScript"><a href="#1-1-引入-JavaScript" class="headerlink" title="1.1 引入 JavaScript"></a>1.1 引入 JavaScript</h2><p>1.内部引入</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript"><span class="token comment">//...</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>2.外部引入</p><p>a.js</p><p>==script 标签必须成对出现，不能自闭和==</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>a.js<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="1-2-基本语法"><a href="#1-2-基本语法" class="headerlink" title="1.2 基本语法"></a>1.2 基本语法</h2><p>基本语法与Java相似</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">=</span> 赋值<span class="token operator">==</span> 等于，值相同，数据类型可以不相同（不建议使用）<span class="token operator">===</span> 绝对等于，值相同，数据类型也需要相同console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> x<span class="token punctuation">)</span><span class="token operator">&gt;</span> stringconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> y<span class="token punctuation">)</span><span class="token operator">&gt;</span> numberconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>x<span class="token operator">==</span>y<span class="token punctuation">)</span><span class="token operator">&gt;</span> <span class="token boolean">true</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>x<span class="token operator">===</span>y<span class="token punctuation">)</span><span class="token operator">&gt;</span> <span class="token boolean">false</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="1-3-数据类型"><a href="#1-3-数据类型" class="headerlink" title="1.3 数据类型"></a>1.3 数据类型</h2><p>数值，文本，图片，音频…</p><p>==number==</p><p>Js 不区分小数和整数</p><h2 id="1-4-JS对象"><a href="#1-4-JS对象" class="headerlink" title="1.4 JS对象"></a>1.4 JS对象</h2><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 对象</span><span class="token keyword">var</span> stu <span class="token operator">=</span> <span class="token punctuation">{</span>    <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">"张三"</span><span class="token punctuation">,</span>    <span class="token literal-property property">call</span><span class="token operator">:</span> <span class="token number">17635159874</span><span class="token punctuation">,</span>    <span class="token literal-property property">sex</span><span class="token operator">:</span> <span class="token string">"男"</span><span class="token punctuation">}</span><span class="token keyword">var</span> 对象名 <span class="token operator">=</span> <span class="token punctuation">{</span>    <span class="token literal-property property">属性名</span><span class="token operator">:</span> <span class="token string">"属性值"</span><span class="token punctuation">,</span>    <span class="token operator">...</span><span class="token punctuation">.</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在Js中，如果要给一个对象添加属性，可以动态添加</p><h2 id="1-5-函数"><a href="#1-5-函数" class="headerlink" title="1.5 函数"></a>1.5 函数</h2><p>无参函数</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 无参函数,直接调用</span>        <span class="token keyword">function</span> <span class="token function">myfunction</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">let</span> x <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span>            <span class="token keyword">let</span> y <span class="token operator">=</span> <span class="token number">9</span><span class="token punctuation">;</span>            <span class="token function">alert</span><span class="token punctuation">(</span>x<span class="token operator">+</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token comment">// html代码</span> <span class="token operator">&lt;</span>button onclick<span class="token operator">=</span><span class="token string">"myfunction()"</span><span class="token operator">&gt;</span>点击这里<span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">&gt;</span><span class="token comment">// 格式</span><span class="token keyword">function</span> <span class="token function">函数名</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    执行代码块<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>有参函数</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">myfunction</span><span class="token punctuation">(</span><span class="token parameter">name<span class="token punctuation">,</span>job</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">"My name is "</span><span class="token operator">+</span>name<span class="token operator">+</span><span class="token string">",I’m a "</span><span class="token operator">+</span>job<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token comment">// html代码</span>    <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span>参数要用<span class="token string">''</span>单引号，不然会无反应<span class="token operator">--</span><span class="token operator">&gt;</span>    <span class="token operator">&lt;</span>button onclick<span class="token operator">=</span><span class="token string">"myfunction('Harry','student')"</span><span class="token operator">&gt;</span>点击<span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="1-6-iterion-迭代器"><a href="#1-6-iterion-迭代器" class="headerlink" title="1.6 iterion 迭代器"></a>1.6 iterion 迭代器</h2><blockquote><p>map 和 set 是es6的新标准</p></blockquote><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// Map 集合</span>      <span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Map</span> <span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token string">"Tom"</span><span class="token punctuation">,</span><span class="token number">100</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token string">"Jcak"</span><span class="token punctuation">,</span><span class="token number">90</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token string">"Alice"</span><span class="token punctuation">,</span><span class="token number">80</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment">// for in 打印数组元素的下标</span>      <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> x <span class="token keyword">in</span> arr<span class="token punctuation">)</span><span class="token punctuation">{</span>          console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token comment">// for of 打印数组的具体元素</span>      <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> x <span class="token keyword">of</span> arr<span class="token punctuation">)</span><span class="token punctuation">{</span>          console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>for each 是es5标准</p></blockquote><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// for each</span>        <span class="token keyword">var</span> m <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Map</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token string">"tom"</span><span class="token punctuation">,</span><span class="token number">100</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token string">"jack"</span><span class="token punctuation">,</span><span class="token number">90</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token string">"alice"</span><span class="token punctuation">,</span><span class="token number">80</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        m<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">value<span class="token punctuation">,</span> key<span class="token punctuation">,</span> map</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>value<span class="token operator">+</span>key<span class="token operator">+</span>map<span class="token punctuation">)</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h1><h2 id="2-1-函数的创建"><a href="#2-1-函数的创建" class="headerlink" title="2.1 函数的创建"></a>2.1 函数的创建</h2><p>创建函数</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 方法一</span><span class="token keyword">function</span> <span class="token function">myfuntion</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token punctuation">}</span><span class="token comment">// 方法二</span><span class="token keyword">var</span> <span class="token function-variable function">myfunction</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">参数</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>arguments 关键字</p><blockquote><p>arguments 关键字只在函数内部起作用，并且永远指向当前函数调用者传入的所有参数</p><p>arguments 与 Array 相似</p></blockquote><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">        <span class="token comment">// 仅供函数内部使用的参数，arguments</span>        <span class="token keyword">var</span> <span class="token function-variable function">abs</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">x</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> arguments<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arguments<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token function">abs</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">20</span><span class="token punctuation">,</span><span class="token number">60</span><span class="token punctuation">,</span><span class="token number">80</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&gt;</span> <span class="token number">10</span><span class="token operator">&gt;</span> <span class="token number">20</span><span class="token operator">&gt;</span> <span class="token number">60</span><span class="token operator">&gt;</span> <span class="token number">80</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>rest</p><p>用于获取函数的多余参数，rest必须放在最后，且要用 … 连接</p></blockquote><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">aaa</span><span class="token punctuation">(</span><span class="token parameter">a<span class="token operator">...</span>rest</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>rest<span class="token punctuation">)</span>        <span class="token punctuation">}</span><span class="token function">aaa</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token comment">//1 []</span><span class="token function">aaa</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">)</span> <span class="token comment">// 1 [2,3,4]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="2-2-var-let-const-区别"><a href="#2-2-var-let-const-区别" class="headerlink" title="2.2 var let const 区别"></a>2.2 var let const 区别</h2><p>var</p><blockquote><p>申明的是变量，全局变量</p></blockquote><p>let</p><blockquote><p>申明的是变量，局部变量</p><p>块级作用域</p></blockquote><p>const</p><blockquote><p>申明的是常量，局部常量</p><p>块级作用域</p></blockquote><h2 id="2-3-解构赋值"><a href="#2-3-解构赋值" class="headerlink" title="2.3 解构赋值"></a>2.3 解构赋值</h2><p>es6 引入的新标准，使用解构赋值可以减少代码量</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> <span class="token punctuation">[</span>x<span class="token punctuation">,</span>y<span class="token punctuation">,</span>z<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>z<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>如果要获取某个对象的属性，也可以使用解构赋值</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token string">'use strict'</span><span class="token punctuation">;</span><span class="token keyword">var</span> person <span class="token operator">=</span> <span class="token punctuation">{</span>    <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">'小明'</span><span class="token punctuation">,</span>    <span class="token literal-property property">age</span><span class="token operator">:</span> <span class="token number">20</span><span class="token punctuation">,</span>    <span class="token literal-property property">gender</span><span class="token operator">:</span> <span class="token string">'male'</span><span class="token punctuation">,</span>    <span class="token literal-property property">passport</span><span class="token operator">:</span> <span class="token string">'G-12345678'</span><span class="token punctuation">,</span>    <span class="token literal-property property">school</span><span class="token operator">:</span> <span class="token string">'No.4 middle school'</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">var</span> <span class="token punctuation">{</span>name<span class="token punctuation">,</span> age<span class="token punctuation">,</span> passport<span class="token punctuation">}</span> <span class="token operator">=</span> person<span class="token punctuation">;</span><span class="token operator">&gt;</span> name <span class="token operator">=</span> 小明<span class="token punctuation">,</span> age <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">,</span> passport <span class="token operator">=</span> <span class="token constant">G</span><span class="token operator">-</span><span class="token number">12345678</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>如果一个函数接受一个对象做为参数，那么也可以使用解构赋值把对象的属性绑定到变量中</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">buildDate</span><span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span>year<span class="token punctuation">,</span> month<span class="token punctuation">,</span> day<span class="token punctuation">,</span> hour<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span> minute<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span> second<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">}</span></span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span>year <span class="token operator">+</span> <span class="token string">"-"</span> <span class="token operator">+</span> month <span class="token operator">+</span> <span class="token string">"-"</span> <span class="token operator">+</span> day <span class="token operator">+</span> <span class="token string">" "</span> <span class="token operator">+</span> hour <span class="token operator">+</span> <span class="token string">":"</span> <span class="token operator">+</span> minute <span class="token operator">+</span> <span class="token string">":"</span> <span class="token operator">+</span> second<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">// 解构赋值</span><span class="token function">buildDate</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token literal-property property">year</span><span class="token operator">:</span> <span class="token number">2022</span><span class="token punctuation">,</span> <span class="token literal-property property">month</span><span class="token operator">:</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token literal-property property">day</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="2-4-Date-对象"><a href="#2-4-Date-对象" class="headerlink" title="2.4 Date 对象"></a>2.4 Date 对象</h2><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// Date 对象练习</span>        <span class="token keyword">let</span> time <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">let</span> year <span class="token operator">=</span> time<span class="token punctuation">.</span><span class="token function">getFullYear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">let</span> month <span class="token operator">=</span> time<span class="token punctuation">.</span><span class="token function">getMonth</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 月份 0~11</span>        <span class="token keyword">let</span> date <span class="token operator">=</span> time<span class="token punctuation">.</span><span class="token function">getDate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 一个月的第几天</span>        <span class="token keyword">let</span> day1 <span class="token operator">=</span> time<span class="token punctuation">.</span><span class="token function">getDay</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 星期几</span>        <span class="token keyword">let</span> day <span class="token operator">=</span> time<span class="token punctuation">.</span><span class="token function">getTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">// 时间戳，1970/01/01到目前的时间毫秒数</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>year<span class="token punctuation">)</span><span class="token punctuation">;</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>month<span class="token punctuation">)</span><span class="token punctuation">;</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>date<span class="token punctuation">)</span><span class="token punctuation">;</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>day<span class="token punctuation">)</span><span class="token punctuation">;</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>day1<span class="token punctuation">)</span><span class="token punctuation">;</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>time<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>计算出生日期</p></blockquote><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 计算出生到现在的天数</span>       <span class="token keyword">let</span> day1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 定义当前的时间</span>       <span class="token keyword">let</span> day2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token string">"2001/06/08"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 定义出生日期</span>       <span class="token comment">// 获取时间戳，毫秒</span>       <span class="token keyword">let</span> time1 <span class="token operator">=</span> day1<span class="token punctuation">.</span><span class="token function">getTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token keyword">let</span> time2 <span class="token operator">=</span> day2<span class="token punctuation">.</span><span class="token function">getTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token keyword">let</span> time <span class="token operator">=</span> time1 <span class="token operator">-</span> time2<span class="token punctuation">;</span>       <span class="token comment">// 将获取的毫秒数转换成天数</span>       <span class="token keyword">let</span> day <span class="token operator">=</span> <span class="token function">parseInt</span><span class="token punctuation">(</span>time <span class="token operator">/</span> <span class="token punctuation">(</span><span class="token number">1000</span><span class="token operator">*</span><span class="token number">60</span><span class="token operator">*</span><span class="token number">60</span><span class="token operator">*</span><span class="token number">24</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token keyword">let</span> year <span class="token operator">=</span> <span class="token function">parseInt</span><span class="token punctuation">(</span>day <span class="token operator">/</span> <span class="token number">365</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"出生已"</span><span class="token operator">+</span>day<span class="token operator">+</span><span class="token string">"天,"</span><span class="token operator">+</span>year<span class="token operator">+</span><span class="token string">"岁了"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="2-5-JSON-对象"><a href="#2-5-JSON-对象" class="headerlink" title="2.5 JSON 对象"></a>2.5 JSON 对象</h2><p>什么是<code> JSON</code> ?</p><p><a href="https://baike.baidu.com/item/JSON">JSON</a>(<a href="https://baike.baidu.com/item/JavaScript">JavaScript</a> Object Notation, JS 对象简谱) 是一种==轻量级的数据交换格式==，类似Xml。简洁和清晰的层次结构使得 JSON 成为理想的==数据交换语言==。 易于人阅读和编写，同时也易于机器解析和生成，并==有效地提升网络传输效率==。</p><ul><li>JSON 指的是 JavaScript 对象表示法（<strong>J</strong>ava<strong>S</strong>cript <strong>O</strong>bject <strong>N</strong>otation）</li><li>JSON 独立于语言：JSON 使用 Javascript语法来描述数据对象，但是 JSON 仍然独立于语言和平台。JSON 解析器和 JSON 库支持许多不同的编程语言。 目前非常多的动态（PHP，JSP，.NET）编程语言都支持JSON。</li><li>JSON 具有自我描述性，更易理解</li></ul><p>格式：</p><ul><li>对象用{}</li><li>数组用 []</li><li>所有的键值对，都用 key：value</li></ul><p>JSON 和 JS对象的转换</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"> <span class="token comment">// 普通的对象</span>        <span class="token keyword">let</span> user <span class="token operator">=</span> <span class="token punctuation">{</span>            <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">"夏一北"</span><span class="token punctuation">,</span>            <span class="token literal-property property">age</span><span class="token operator">:</span> <span class="token number">20</span><span class="token punctuation">,</span>            <span class="token literal-property property">sex</span><span class="token operator">:</span> <span class="token string">"男"</span>        <span class="token punctuation">}</span>        <span class="token comment">// 转换为 json 对象</span>        <span class="token keyword">let</span> JsonUser <span class="token operator">=</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>JsonUser<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 返回值是一个字符串，{"name":"夏一  北","age":20,"sex":"男"}</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">// 返回值是一个对象，{"name":"夏一北","age":20,"sex":"男"}</span><span class="token comment">// 通过字符串解析成一个对象</span><span class="token keyword">let</span> JsonUser <span class="token operator">=</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span><span class="token string">'{"name":"夏一北","age":20,"sex":"男"}'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>JsonUser<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>JSON 和 JS 对象的区别</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// js</span><span class="token keyword">var</span> obj1 <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">"jack"</span><span class="token punctuation">,</span> <span class="token literal-property property">age</span><span class="token operator">:</span> <span class="token number">18</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment">// JSON</span><span class="token keyword">var</span> obj2 <span class="token operator">=</span> <span class="token string">'{'</span>name<span class="token string">': '</span>jack<span class="token string">', '</span>age<span class="token string">': 18}'</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h1 id="面向对象编程"><a href="#面向对象编程" class="headerlink" title="面向对象编程"></a>面向对象编程</h1><h2 id="3-1-面向对象原型继承"><a href="#3-1-面向对象原型继承" class="headerlink" title="3.1 面向对象原型继承"></a>3.1 面向对象原型继承</h2><p>原型</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">//面向对象原型继承</span>        <span class="token keyword">let</span> stu <span class="token operator">=</span> <span class="token punctuation">{</span>            <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">"alice"</span><span class="token punctuation">,</span>            <span class="token literal-property property">hobby</span><span class="token operator">:</span> <span class="token string">"run"</span><span class="token punctuation">,</span>            <span class="token function-variable function">run</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token operator">+</span><span class="token string">" like run"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">let</span> xiaoming <span class="token operator">=</span> <span class="token punctuation">{</span>            <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">"xiaoming"</span><span class="token punctuation">,</span>        <span class="token punctuation">}</span>        <span class="token comment">// 指向原型</span>        xiaoming<span class="token punctuation">.</span>__proto__ <span class="token operator">=</span> stu<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="3-2-面向对象class继承"><a href="#3-2-面向对象class继承" class="headerlink" title="3.2 面向对象class继承"></a>3.2 面向对象class继承</h2><p>函数也是一个对象，它的原型链是==function —&gt; Function.prototype —&gt; Object.prototype —&gt; null==</p><h3 id="构造函数"><a href="#构造函数" class="headerlink" title="构造函数"></a>构造函数</h3><p>在JavaScript中，可以使用关键字new来调用一个函数，并且返回一个对象</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">Student</span><span class="token punctuation">(</span><span class="token parameter">name</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment">//它绑定的this指向新创建的对象</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function-variable function">hello</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">"hello, "</span><span class="token operator">+</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token comment">// 创建一个对象</span>        <span class="token keyword">let</span> xiaoming <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token string">"xiaoming"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// xiaoming --&gt; Student.prototype --&gt; Object.prototype --&gt; null</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>如果 new 出了多个对象，就调用了多个hello函数，为了节约内存，我们可以用原型直接创建函数</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">Student</span><span class="token punctuation">(</span><span class="token parameter">name</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token class-name">Student</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">hello</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">"hello, "</span><span class="token operator">+</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">let</span> xiaoming <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token string">"xiaoming"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="class继承"><a href="#class继承" class="headerlink" title="class继承"></a>class继承</h3><p>与java类似，继承的关键字 extends</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// class 继承</span>        <span class="token keyword">class</span> <span class="token class-name">Student</span><span class="token punctuation">{</span>            <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">name<span class="token punctuation">,</span> age</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>                <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token function">age1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token function">alert</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token operator">+</span><span class="token string">"今年"</span><span class="token operator">+</span><span class="token keyword">this</span><span class="token punctuation">.</span>age<span class="token operator">+</span><span class="token string">"岁了！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">class</span> <span class="token class-name">Xi</span> <span class="token keyword">extends</span> <span class="token class-name">Student</span><span class="token punctuation">{</span>            <span class="token comment">// 构造函数</span>            <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">name<span class="token punctuation">,</span>age<span class="token punctuation">,</span>sex</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">super</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span>age<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">this</span><span class="token punctuation">.</span>sex <span class="token operator">=</span> sex<span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token function">sex1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">"I am a "</span><span class="token operator">+</span><span class="token keyword">this</span><span class="token punctuation">.</span>sex<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">let</span> shd <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Xi</span><span class="token punctuation">(</span><span class="token string">"宋宏达"</span><span class="token punctuation">,</span><span class="token number">18</span><span class="token punctuation">,</span><span class="token string">"男"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        shd<span class="token punctuation">.</span><span class="token function">age1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        shd<span class="token punctuation">.</span><span class="token function">sex1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="操作BOM-对象（重点）"><a href="#操作BOM-对象（重点）" class="headerlink" title="操作BOM 对象（重点）"></a>操作BOM 对象（重点）</h1><p>BOM ： 浏览器对象模型</p><blockquote><p>widow 对象（重点）</p></blockquote><p>window 代表浏览器窗口</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">window<span class="token punctuation">.</span>innerWidth <span class="token comment">// 获取浏览器内部宽度</span><span class="token number">1536</span>window<span class="token punctuation">.</span>innerHeight <span class="token comment">// 获取浏览器内部高度</span><span class="token number">279</span><span class="token comment">// ....</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>navigator</p></blockquote><p><code>navigator</code>对象表示浏览器的信息</p><ul><li>navigator.appName：浏览器名称；</li><li>navigator.appVersion：浏览器版本；</li><li>navigator.language：浏览器设置的语言；</li><li>navigator.platform：操作系统类型；</li><li>navigator.userAgent：浏览器设定的<code>User-Agent</code>字符串。</li></ul><blockquote><p>screen</p></blockquote><p><code>screen</code>对象表示屏幕的信息，常用的属性有：</p><ul><li>screen.width：屏幕宽度，以像素为单位；</li><li>screen.height：屏幕高度，以像素为单位；</li><li>screen.colorDepth：返回颜色位数，如8、16、24。</li></ul><blockquote><p>location</p></blockquote><p><code>location</code>对象表示当前页面的URL信息。例如，一个完整的URL：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">location<span class="token punctuation">.</span>protocol<span class="token punctuation">;</span> <span class="token comment">// 'http'</span>location<span class="token punctuation">.</span>host<span class="token punctuation">;</span> <span class="token comment">// 'www.example.com'</span>location<span class="token punctuation">.</span>port<span class="token punctuation">;</span> <span class="token comment">// '8080'</span>location<span class="token punctuation">.</span>pathname<span class="token punctuation">;</span> <span class="token comment">// '/path/index.html'</span>location<span class="token punctuation">.</span>search<span class="token punctuation">;</span> <span class="token comment">// '?a=1&amp;b=2'</span>location<span class="token punctuation">.</span>hash<span class="token punctuation">;</span> <span class="token comment">// 'TOP'</span>location<span class="token punctuation">.</span><span class="token function">assign</span><span class="token punctuation">(</span><span class="token string">"https://www.iconfont.cn/"</span><span class="token punctuation">)</span> <span class="token comment">//打开一个新的网页</span>location<span class="token punctuation">.</span><span class="token function">reload</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment">// 重新加载此页面</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>document（重点）</p></blockquote><p><code>document</code>对象表示当前页面。由于HTML在浏览器中以DOM形式表示为树形结构，<code>document</code>对象就是整个DOM树的根节点。</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dl</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>drink-menu<span class="token punctuation">"</span></span> <span class="token special-attr"><span class="token attr-name">style</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token value css language-css"><span class="token property">border</span><span class="token punctuation">:</span>solid 1px #ccc<span class="token punctuation">;</span><span class="token property">padding</span><span class="token punctuation">:</span>6px<span class="token punctuation">;</span></span><span class="token punctuation">"</span></span></span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dt</span><span class="token punctuation">&gt;</span></span>摩卡<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dt</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dd</span><span class="token punctuation">&gt;</span></span>热摩卡咖啡<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dd</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dt</span><span class="token punctuation">&gt;</span></span>酸奶<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dt</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dd</span><span class="token punctuation">&gt;</span></span>北京老酸奶<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dd</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dt</span><span class="token punctuation">&gt;</span></span>果汁<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dt</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dd</span><span class="token punctuation">&gt;</span></span>鲜榨苹果汁<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dd</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dl</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> menu <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'drink-menu'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> drinks <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementsByTagName</span><span class="token punctuation">(</span><span class="token string">'dt'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> i<span class="token punctuation">,</span> s<span class="token punctuation">;</span>s <span class="token operator">=</span> <span class="token string">'提供的饮料有:'</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span>drinks<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    s <span class="token operator">=</span> s <span class="token operator">+</span> drinks<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>innerHTML <span class="token operator">+</span> <span class="token string">','</span><span class="token punctuation">;</span><span class="token punctuation">}</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 提供的饮料有:摩卡,酸奶,果汁,</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Cookie是由服务器发送的key-value标示符。因为HTTP协议是无状态的，但是服务器要区分到底是哪个用户发过来的请求，就可以用Cookie来区分。当一个用户成功登录后，服务器发送一个Cookie给浏览器，例如<code>user=ABC123XYZ(加密的字符串)...</code>，此后，浏览器访问该网站时，会在请求头附上这个Cookie，服务器根据Cookie即可区分出用户。</p><p>Cookie还可以存储网站的一些设置，例如，页面显示的语言等等。</p><p>JavaScript可以通过<code>document.cookie</code>读取到当前页面的Cookie：</p><blockquote><p>在实际的开发中，cookie 会设置为只读，保证用户的安全</p><p>cookie : httpOnly</p></blockquote><blockquote><p>history            </p></blockquote><p>history 保留了浏览器的历史纪录</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">history<span class="token punctuation">.</span><span class="token function">back</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment">// 后退</span>history<span class="token punctuation">.</span><span class="token function">forword</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment">// 前进</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h1 id="操作-DOM（重点）"><a href="#操作-DOM（重点）" class="headerlink" title="操作 DOM（重点）"></a>操作 DOM（重点）</h1><p>DOM ： 文档对象模型</p><p>DOM 是一个树形结构，改变HTML的结构，就是用 JS 通过DOM 来改变。</p><ul><li>更新：更新该 DOM 文档的结构，更新 HTML 的内容</li><li>遍历：遍历该 DOM 节点一下的节点</li><li>添加：在该DOM节点下新增一个子节点，相当于动态增加了一个HTML节点</li><li>删除：将该节点从HTML中删除，相当于删掉了该DOM节点的内容以及它包含的所有子节点。</li></ul><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 在操作一个 DOM 节点时，我们通过一些方法首先获取DOM节点</span><span class="token comment">// document.getElementById(), 在html中id是唯一的，可以通过id确定唯一的dom节点</span><span class="token comment">// 返回的总是一组dom节点，可以通过定位父节点来精确</span><span class="token comment">/* document.getElementsByTagName() document.getElementsByClassName() */</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>更新DOM节点</p></blockquote><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">&lt;</span>div id<span class="token operator">=</span><span class="token string">"id1"</span><span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><code>var id1 = document.getElementById("id1")</code></p><p><code>id1.innerText = "abc"</code> 更改文本内容</p><p><code>id1.innerHTML = "&lt;strong&gt;abc&lt;/strong&gt;</code>更改解析html标签</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">// 操作js</span>id1<span class="token punctuation">.</span>style<span class="token punctuation">.</span>color<span class="token operator">=</span><span class="token string">"red"</span><span class="token punctuation">;</span>id1<span class="token punctuation">.</span>style<span class="token punctuation">.</span>fontSize<span class="token operator">=</span><span class="token string">"200px"</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><blockquote><p>删除DOM节点</p></blockquote><p>操作步骤</p><ol><li>获取父节点</li><li>调用父节点的方法删除自己</li></ol><blockquote><p>插入节点</p></blockquote><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">&lt;</span>div id<span class="token operator">=</span><span class="token string">"list"</span><span class="token operator">&gt;</span>    <span class="token operator">&lt;</span>p id<span class="token operator">=</span><span class="token string">"java"</span><span class="token operator">&gt;</span>Java<span class="token operator">&lt;</span><span class="token operator">/</span>p<span class="token operator">&gt;</span>    <span class="token operator">&lt;</span>p id<span class="token operator">=</span><span class="token string">"python"</span><span class="token operator">&gt;</span>Python<span class="token operator">&lt;</span><span class="token operator">/</span>p<span class="token operator">&gt;</span>    <span class="token operator">&lt;</span>p id<span class="token operator">=</span><span class="token string">"scheme"</span><span class="token operator">&gt;</span>Scheme<span class="token operator">&lt;</span><span class="token operator">/</span>p<span class="token operator">&gt;</span>    <span class="token operator">&lt;</span>p id<span class="token operator">=</span><span class="token string">"js"</span><span class="token operator">&gt;</span>JavaScript<span class="token operator">&lt;</span><span class="token operator">/</span>p<span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span><span class="token operator">&lt;</span>script<span class="token operator">&gt;</span>    <span class="token keyword">let</span> list <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"list"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> app <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">"p"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    app<span class="token punctuation">.</span>id <span class="token operator">=</span> <span class="token string">"app"</span><span class="token punctuation">;</span>    app<span class="token punctuation">.</span>innerText <span class="token operator">=</span> <span class="token string">"app"</span><span class="token punctuation">;</span>    list<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>app<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="操作表单-验证"><a href="#操作表单-验证" class="headerlink" title="操作表单(验证)"></a>操作表单(验证)</h1><p>HTML 主要的表单控件</p><ul><li>文本框，对应的<code>&lt;input type="text"&gt;</code>，用于输入文本；</li><li>口令框，对应的<code>&lt;input type="password"&gt;</code>，用于输入口令；</li><li>单选框，对应的<code>&lt;input type="radio"&gt;</code>，用于选择一项；</li><li>复选框，对应的<code>&lt;input type="checkbox"&gt;</code>，用于选择多项；</li><li>下拉框，对应的<code>&lt;select&gt;</code>，用于选择一项；</li><li>隐藏文本，对应的<code>&lt;input type="hidden"&gt;</code>，用户不可见，但表单提交时会把隐藏文本发送到服务器</li></ul><blockquote><p>文本框</p></blockquote><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">&lt;</span>input type<span class="token operator">=</span><span class="token string">"text"</span> id<span class="token operator">=</span><span class="token string">"email"</span><span class="token operator">&gt;</span>    <span class="token comment">// 获取文本的值</span><span class="token keyword">var</span> text <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"email"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>text<span class="token punctuation">.</span>value<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>口令框</p></blockquote><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token operator">&lt;</span>input type<span class="token operator">=</span><span class="token string">"password"</span> id<span class="token operator">=</span><span class="token string">"pwd"</span><span class="token operator">&gt;</span>    <span class="token comment">// 获取密码</span><span class="token keyword">var</span> pwd <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"pwd"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>单选框 复选框 </p></blockquote><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token operator">&lt;</span>label<span class="token operator">&gt;</span>    <span class="token operator">&lt;</span>input type<span class="token operator">=</span><span class="token string">"radio"</span> name<span class="token operator">=</span><span class="token string">"choice"</span> id<span class="token operator">=</span><span class="token string">"sun"</span> value<span class="token operator">=</span><span class="token string">"7"</span><span class="token operator">/</span><span class="token operator">&gt;</span>星期日    <span class="token operator">&lt;</span>input type<span class="token operator">=</span><span class="token string">"radio"</span> name<span class="token operator">=</span><span class="token string">"choice"</span> id<span class="token operator">=</span><span class="token string">"tue"</span> value<span class="token operator">=</span><span class="token string">"6"</span><span class="token operator">/</span><span class="token operator">&gt;</span>星期六<span class="token operator">&lt;</span><span class="token operator">/</span>label<span class="token operator">&gt;</span>  <span class="token keyword">var</span> choice <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"sun"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> choice2 <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"tue"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 输出value的预定值</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>choice<span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>choice2<span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 选中--&gt;true    未选---&gt;flase</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>choice<span class="token punctuation">.</span>checked<span class="token punctuation">)</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>choice2<span class="token punctuation">.</span>checked<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>表单验证及MD5加密</p></blockquote><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> <span class="token constant">HTML</span> <span class="token operator">--</span><span class="token operator">&gt;</span><span class="token operator">&lt;</span>form id<span class="token operator">=</span><span class="token string">"login-form"</span> method<span class="token operator">=</span><span class="token string">"post"</span> onsubmit<span class="token operator">=</span><span class="token string">"return checkForm()"</span><span class="token operator">&gt;</span>    <span class="token operator">&lt;</span>input type<span class="token operator">=</span><span class="token string">"text"</span> id<span class="token operator">=</span><span class="token string">"username"</span> name<span class="token operator">=</span><span class="token string">"username"</span><span class="token operator">&gt;</span>    <span class="token operator">&lt;</span>input type<span class="token operator">=</span><span class="token string">"password"</span> id<span class="token operator">=</span><span class="token string">"password"</span> name<span class="token operator">=</span><span class="token string">"password"</span><span class="token operator">&gt;</span>    <span class="token operator">&lt;</span>button type<span class="token operator">=</span><span class="token string">"submit"</span><span class="token operator">&gt;</span>Submit<span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>form<span class="token operator">&gt;</span><span class="token operator">&lt;</span>script<span class="token operator">&gt;</span><span class="token keyword">function</span> <span class="token function">checkForm</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">var</span> pwd <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'password'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 把用户输入的明文变为MD5:</span>    pwd<span class="token punctuation">.</span>value <span class="token operator">=</span> <span class="token function">toMD5</span><span class="token punctuation">(</span>pwd<span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 继续下一步:</span>    <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token operator">&lt;</span>form action<span class="token operator">=</span><span class="token string">"#"</span> method<span class="token operator">=</span><span class="token string">"post"</span><span class="token operator">&gt;</span>    <span class="token operator">&lt;</span>p<span class="token operator">&gt;</span><span class="token operator">&lt;</span>span<span class="token operator">&gt;</span>用户名<span class="token operator">:</span><span class="token operator">&lt;</span><span class="token operator">/</span>span<span class="token operator">&gt;</span>        <span class="token operator">&lt;</span>input type<span class="token operator">=</span><span class="token string">"text"</span> id<span class="token operator">=</span><span class="token string">"username"</span> name<span class="token operator">=</span><span class="token string">"username"</span><span class="token operator">&gt;</span>    <span class="token operator">&lt;</span><span class="token operator">/</span>p<span class="token operator">&gt;</span>    <span class="token operator">&lt;</span>p<span class="token operator">&gt;</span><span class="token operator">&lt;</span>span<span class="token operator">&gt;</span>密码 <span class="token operator">:</span><span class="token operator">&lt;</span><span class="token operator">/</span>span<span class="token operator">&gt;</span>        <span class="token operator">&lt;</span>input type<span class="token operator">=</span><span class="token string">"password"</span> id<span class="token operator">=</span><span class="token string">"password"</span> name<span class="token operator">=</span><span class="token string">"password"</span><span class="token operator">&gt;</span>    <span class="token operator">&lt;</span><span class="token operator">/</span>p<span class="token operator">&gt;</span>    <span class="token operator">&lt;</span>button type<span class="token operator">=</span>submit<span class="token string">" onclick="</span><span class="token function">aaa</span><span class="token punctuation">(</span><span class="token punctuation">)</span>"<span class="token operator">&gt;</span>提交<span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>form<span class="token operator">&gt;</span>    <span class="token operator">&lt;</span>script<span class="token operator">&gt;</span>        <span class="token keyword">function</span> <span class="token function">aaa</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">let</span> name <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"username"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">let</span> pwd <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"password"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            pwd<span class="token punctuation">.</span>value <span class="token operator">=</span> <span class="token function">md5</span><span class="token punctuation">(</span>pwd<span class="token punctuation">.</span>value<span class="token punctuation">)</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>name<span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>pwd<span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这个做法看上去没啥问题，但用户输入了口令提交时，口令框的显示会突然从几个<code>*</code>变成32个<code>*</code>（因为MD5有32个字符）。</p><p>要想不改变用户的输入，可以利用<code>&lt;input type="hidden"&gt;</code>实现：</p><h1 id="JQuery"><a href="#JQuery" class="headerlink" title="JQuery"></a>JQuery</h1><blockquote><p>什么是 jQuery？</p></blockquote><ol><li>jQuery 是一个 JavaScript 库。</li><li>可以操作dom</li><li>可以使用ajax实现交互</li></ol><blockquote><p>导入 jQuery</p></blockquote><ol><li>在线 cdn</li></ol><p><code>&lt;script src="http://code.jquery.com/jquery-migrate-1.2.1.min.js"&gt;&lt;/script&gt;</code></p><ol start="2"><li>下载，导入本地</li></ol><blockquote><p>使用</p></blockquote><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">// jQuery  公式 $(selector}).action()</span>    <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'#link'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">click</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">'hello,jQuery'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token comment">// html</span><span class="token operator">&lt;</span>a href<span class="token operator">=</span><span class="token string">""</span> id<span class="token operator">=</span><span class="token string">"link"</span><span class="token operator">&gt;</span>点我<span class="token operator">&lt;</span><span class="token operator">/</span>a<span class="token operator">&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>选择器</p></blockquote><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token punctuation">.</span>class <span class="token comment">// 类选择器</span>#id  <span class="token comment">// id选择器</span><span class="token string">'p'</span>  <span class="token comment">// 标签选择器</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><a href="https://jquery.cuishifeng.cn/">jQuery API 中文文档 | jQuery API 中文在线手册 | jquery api 下载 | jquery api chm (cuishifeng.cn)</a></p>]]></content>
      
      
      <categories>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
